#!/usr/bin/env python3

__description__    = 'Maniplulates a sshuttle connection mostly to automatically prevent it from blocking remote access to your machine once connected'
__author__         = 'Cedric Rochat <rochatc@gmail.com>'
__date__           = '10.02.2020'

import sys
import os
import re
import signal
import time
import subprocess
import ipaddress
import paramiko
import pprint
import pexpect
import getpass

host = None
user = None
passwd = None

# Uncomment and use it if you are brave
#host = 'remote_server_hostname'
#user = 'myUser'
#passwd = 'myPasswordd'


sshuttle_params = ['--dns', '0/0']
wait_forever = True

pp = pprint.PrettyPrinter(indent=4)

class SshuttlePlus:
    __general_console_charset = None
    __host = None
    __user = None
    __passwd = None
    __sudo_passwd = None
    __sshuttle_params = None
    __client = None
    __remote_dns_servers = None
    __local_ifaces = None
    __ipt_dns_ok = False
    __ipt_sshuttle_ports = 12300
    __ipt_sshuttle_chain = f'sshuttle-{__ipt_sshuttle_ports}'

    def __init__(self, host, user, passwd, sshuttle_params=None):
        self.__general_console_charset = 'utf8'
        self.__host = host
        self.__user = user
        self.__passwd = passwd
        if isinstance(sshuttle_params, list):
            self.__sshuttle_params = sshuttle_params
        self.__remote_dns = {'domains': None, 'servers': None}
        self.__local_ifaces = None

    def connect(self):
        client = None
        while client is None:
            try:
                client = paramiko.SSHClient()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(self.__host, username=self.__user, password=self.__passwd)
                self.__client = client
            except paramiko.ssh_exception.AuthenticationException as e:
                client = None
                if self.__passwd is None:
                    self.__passwd = getpass.getpass(f'Password for connection {self.__user}@{self.__host}: ')
                else:
                    print("Can't establish SSH connection!")
                    sys.exit(1)
            except Exception as e:
                print("Can't establish SSH connection!")
                print(e)
                sys.exit(1)

    def disconnect(self):
        if self.__client is not None:
            self.__client.close()
            self.__client = None

    def _sudo_cmd(self, cmd):
        if self.__sudo_passwd is not None:
            return 'echo %s | sudo ' % self.__sudo_passwd + cmd
        else:
            return 'sudo ' + cmd

    def _analyse_remote_dns(self):
        if self.__client is None:
            self.connect()
        if self.__client is not None:
            stdin, stdout, stderr = self.__client.exec_command("grep '^search' /etc/resolv.conf|awk '{print $NF}'")
            dns_domains = stdout.readlines()
            for i, dns_domain in enumerate(dns_domains):
                if self.__remote_dns['domains'] is None:
                    self.__remote_dns['domains'] = []
                dns_domain = dns_domain.strip()
                self.__remote_dns['domains'].append(dns_domain)

                stdin2, stdout2, stderr2 = self.__client.exec_command("host -t ns %s|awk '{print $NF}'" %(dns_domain+'.'))
                dns_servers = stdout2.readlines()
                for dns_server in dns_servers:
                    dns_server = dns_server.strip()
                    stdin3, stdout3, stderr3 = self.__client.exec_command("host -t a %s|awk '{print $NF}'" %(dns_server))
                    dns_server_ip = stdout3.readline().strip()
                    if dns_server_ip != '':
                        if self.__remote_dns['servers'] is None:
                            self.__remote_dns['servers'] = []
                        dns_servers_ip_list = []
                        if len(self.__remote_dns['servers']) > 0:
                            dns_servers_ip_list = [ sub['ip'] for sub in self.__remote_dns['servers'] ]
                        if dns_server_ip not in dns_servers_ip_list:
                            self.__remote_dns['servers'].append({'domain': dns_domain, 'name': dns_server, 'ip': dns_server_ip})

    def _analyse_local_ifaces(self):
        ifaces = []

        iface = None
        iface_skip = False
        proc = subprocess.Popen(['ip link show'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, shell=True)
        for line in iter(proc.stdout.readline, b''):
            line = line.decode(self.__general_console_charset)
            fields = line.split()
            if re.search(r'^\d*:', fields[0]):
                if ':' in fields[1].rstrip(':'):
                    iface_skip = True
                else:
                    iface_skip = False
                if not iface_skip:
                    iface = {'id': None, 'type': None, 'bridge_type': None, 'bridge_master_id': None, 'bridge_master_name': None,
                            'name': None, 'mac': None, 'state': None, 'low_state': None, 'mtu': None, 'addresses': []}
                    iface['id'] = fields[0].rstrip(':')
                    iface['name'] = fields[1].rstrip(':')
                    if re.search(r'@', iface['name']):
                        iface['name'] = iface['name'].split('@')[0]
                    address = {'name': iface['name'], 'ipv4': None, 'ipv4_proto': None, 'ipv4_netmask': None, 'ipv4_network': None,
                            'ipv4_network_cidr': None, 'ipv4_broadcast': None, 'ipv4_cidr': None, 'ipv4_prefix_len': None, 'ipv4_gateway': None,
                            'ipv4_dns': [], 'ipv6': None}
                    iface['addresses'].append(address)
                    states = fields[2].lower().strip('<>').split(',')
                    if 'up' in states:
                        iface['state'] = 'up'
                    elif 'down' in states:
                        iface['state'] = 'down'
                    if states[0] == 'no-carrier':
                        iface['low_state'] = 'down'
                    else:
                        if 'lower_up' in states:
                            iface['low_state'] = 'up'
                        elif 'lower_down' in states:
                            iface['low_state'] = 'down'
                        elif 'state' in fields:
                            i = 0
                            for field in fields:
                                if field == 'state':
                                    iface['low_state'] = fields[i + 1].lower()
                                    break
                                i += 1
                    if fields[3] == 'mtu':
                        iface['mtu'] = fields[4]
            elif not iface_skip and re.search(r'link', fields[0]):
                iface['type'] = fields[0].split('/')[1]
                if len(fields) >= 2:
                    iface['mac'] = fields[1]
                ifaces.append(iface)

        bridge_ifaces = []
        bridge_iface = None
        proc = subprocess.Popen(['bridge link'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, shell=True)
        for line in iter(proc.stdout.readline, b''):
            line = line.decode(self.__general_console_charset)
            fields = line.split()
            if re.search(r' master ', line) and re.search(r'^\d*:', fields[0]):
                bridge_iface = {'id': None, 'bridge_type': None, 'bridge_master_id': None, 'bridge_master_name': None, 'name': None}
                bridge_iface['id'] = fields[0].rstrip(':')
                bridge_iface['name'] = fields[1]
                if fields[8] == 'master':
                    bridge_iface['bridge_type'] = 'slave'
                    bridge_iface['bridge_master_name'] = fields[9]
                    if_check_count = 0
                    for ifcheck in ifaces:
                        if ifcheck['name'] == bridge_iface['bridge_master_name']:
                            bridge_iface['bridge_master_id'] = ifcheck['id']
                            if ifcheck['bridge_type'] is None:
                                ifaces[if_check_count]['type'] = 'bridge'
                                ifaces[if_check_count]['bridge_type'] = 'master'
                        if_check_count += 1
                if_check_count = 0
                for ifcheck in ifaces:
                    if ifcheck['name'] == bridge_iface['name']:
                        break
                    if_check_count += 1
                ifaces[if_check_count]['bridge_type'] = bridge_iface['bridge_type']
                ifaces[if_check_count]['bridge_master_id'] = bridge_iface['bridge_master_id']
                ifaces[if_check_count]['bridge_master_name'] = bridge_iface['bridge_master_name']

        iface = None
        iface_count = -1
        iface_skip = False
        proc = subprocess.Popen(['ip address list'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, shell=True)
        for line in iter(proc.stdout.readline, b''):
            line = line.decode(self.__general_console_charset)
            fields = line.split()
            address = {'name': None, 'ipv4': None, 'ipv4_proto': None, 'ipv4_netmask': None, 'ipv4_network': None, 'ipv4_network_cidr': None,
                    'ipv4_broadcast': None, 'ipv4_cidr': None, 'ipv4_prefix_len': None, 'ipv4_gateway': None, 'ipv4_dns': [], 'ipv6': None}
            if re.search(r'^\d*:', fields[0]):
                if ':' in fields[1].rstrip(':'):
                    iface_skip = True
                else:
                    iface_skip = False
                if not iface_skip:
                    iface_count += 1
                    ifaceid = int(fields[0].rstrip(':'))
            elif not iface_skip and re.search(r'inet$', fields[0]):
                if ifaces[iface_count]['addresses'] is None:
                    ifaces[iface_count]['addresses'] = []
                address['name'] = fields[len(fields) - 1]
                ipv4 = fields[1]
                ipv4iface = ipaddress.IPv4Interface(ipv4)
                ipv4network = ipv4iface.network
                ipv4ip = ipv4iface.ip
                if re.search(r'/', ipv4): address['ipv4_cidr'] = ipv4
                if re.search(r'/', ipv4): address['ipv4_prefix_len'] = str(ipv4network.with_prefixlen).split('/')[1]
                address['ipv4'] = str(ipv4ip)
                if re.search(r'/', ipv4): address['ipv4_netmask'] = str(ipv4network.with_netmask).split('/')[1]
                if re.search(r'/', ipv4): address['ipv4_network'] = str(ipv4network.network_address)
                if re.search(r'/', ipv4): address['ipv4_network_cidr'] = str(ipv4network.with_prefixlen)
                if re.search(r'/', ipv4): address['ipv4_broadcast'] = str(ipv4network.broadcast_address)


                if address['name'] == ifaces[iface_count]['name']:
                    ifaces[iface_count]['addresses'][0] = address
                else:
                    ifaces[iface_count]['addresses'].append(address)
            elif not iface_skip and re.search(r'inet6', fields[0]):
                if ifaces[iface_count]['addresses'] is None:
                    ifaces[iface_count]['addresses'] = []
                if len(ifaces[iface_count]['addresses']) > 0 and ifaces[iface_count]['addresses'][0]['name'] == ifaces[iface_count]['name']:
                    ifaces[iface_count]['addresses'][0]['ipv6'] = fields[1]
                else:
                    address['ipv6'] = fields[1]
                    ifaces[iface_count]['addresses'].append(address)

        proc = subprocess.Popen(['ip route list'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, shell=True)
        for line in iter(proc.stdout.readline, b''):
            line = line.decode(self.__general_console_charset)
            fields = line.split()
            if re.search(r'^default', fields[0]):
                if fields[1] == 'via':
                    gateway_ip = fields[2]
                    if fields[3] == 'dev':
                        gateway_iface = fields[4]
                        if_check_count = 0
                        for ifcheck in ifaces:
                            if ifcheck['name'] == gateway_iface:
                                address_check_count = 0
                                for address_check in ifcheck['addresses']:
                                    if address_check['name'] == gateway_iface:
                                        ifaces[if_check_count]['addresses'][address_check_count]['ipv4_gateway'] = gateway_ip
                                    address_check_count += 1
                            if_check_count += 1
        self.__local_ifaces = ifaces
        #cat /var/run/dhclient-enp0s25.pid
        #ps ax|awk -v pid=5838 '{if ($1==pid) print $NF}'

    def _ipt_dns(self):
        if not self.__ipt_dns_ok and '--dns' in self.__sshuttle_params:
            rule_nr = None
            ipt_dns_domains_rules = None
            if self.__remote_dns['domains'] is not None:
                time.sleep(0.1)
                proc = subprocess.Popen([self._sudo_cmd(f'iptables -t nat -nv --list {self.__ipt_sshuttle_chain} --line-numbers')], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, bufsize=1, shell=True)
                for line in iter(proc.stdout.readline, b''):
                    line = line.decode(self.__general_console_charset).strip()
                    fields = line.split()
                    if re.search(r'^\d', fields[0]):
                        if fields[4] == 'udp' and fields[9] == '127.0.0.53':
                            rule_nr = int(fields[0])
                if rule_nr is not None:
                    for domain in self.__remote_dns['domains']:
                        ipt_dns_domain_string = ''
                        if ipt_dns_domains_rules is None:
                            ipt_dns_domains_rules = []
                        if re.search(r'\.', domain):
                            domain_parts = domain.split('.')
                            ipt_dns_domain_string = '--hex-string "'
                            for part in domain_parts:
                                ipt_dns_domain_string += '|%s|%s' %(str('{0:x}'.format(len(part))).zfill(2), part)
                            ipt_dns_domain_string += '"'
                        else:
                            ipt_dns_domain_string = f'--string {domain}'
                        cmd = f'iptables -t nat -I {self.__ipt_sshuttle_chain} {rule_nr} -d 127.0.0.53 -p udp -m udp --dport 53 -m ttl ! --ttl-eq 42 -m string {ipt_dns_domain_string} --algo kmp -j REDIRECT --to-ports {self.__ipt_sshuttle_ports}'
                        ipt_dns_domains_rules.append(cmd)

            if ipt_dns_domains_rules is not None:
                #print(ipt_dns_domains_rules)
                for ipt_rule in ipt_dns_domains_rules:
                    os.system(self._sudo_cmd(ipt_rule))
                cmd = f'iptables -t nat -D {self.__ipt_sshuttle_chain} {rule_nr + len(ipt_dns_domains_rules)}'
                #print(cmd)
                os.system(self._sudo_cmd(cmd))
            self.__ipt_dns_ok = True

    def get_remote_dns(self):
        if self.__remote_dns['servers'] is None:
            self._analyse_remote_dns()

        return self.__remote_dns

    def get_local_ifaces(self):
        if self.__local_ifaces is None:
            self._analyse_local_ifaces()

        return self.__local_ifaces

    def get_local_networks(self, aliens_only=False):
        networks = []
        ifaces = self.get_local_ifaces()
        for iface in ifaces:
            if aliens_only and iface['name'] == 'lo':
                continue
            if iface['state'] == 'up':
                for address in iface['addresses']:
                    network = address['ipv4_network_cidr']
                    if network is not None and network != '' and network not in networks:
                        networks.append(network)

        return networks

    def sshuttle(self):
        remote_dns = self.get_remote_dns()
        remote_dns_domains = remote_dns['domains']
        remote_dns_servers = remote_dns['servers']
        remote_dns_servers_string = ''
        if remote_dns_servers is not None:
            for dns_server in remote_dns_servers:
                if remote_dns_servers_string != '':
                    remote_dns_servers_string += "\n"
                remote_dns_servers_string += f"{dns_server['name']}\t\t\t{dns_server['ip']}\t\t\t{dns_server['domain']} NS"
        local_networks = self.get_local_networks(aliens_only=True)
        local_networks_string = '\n'.join(local_networks)

        command = f'sshuttle -r {self.__user}@{self.__host} -x {self.__host}'
        if len(local_networks) > 0:
            command += ' -x '
        command += ' -x '.join('{}'.format(network) for network in local_networks)

        no_dns_message = None
        if self.__sshuttle_params is not None:
            if remote_dns_domains is None and '--dns' in self.__sshuttle_params:
                self.__sshuttle_params.pop(self.__sshuttle_params.index('--dns'))
                no_dns_message = """

As I wasn't able to catch a specific enough remote DNS configuration, I removed '--dns'
from the sshuttle parameters.
This way, all your DNS queries will stay local.
"""
            command += ' ' + ' '.join(self.__sshuttle_params)
        print(command)

        message = f"""Trying to establish a sshuttle connection with {self.__user}@{self.__host}.
I will also exclude your local network(s) from the tunneling redirections. These are:
{local_networks_string}
"""
        if remote_dns_domains is not None:
            message += f"""

By the way, I also got the remote DNS configuration. Here it is:
search domains: {', '.join(remote_dns_domains)}
"""
            message += f"""    Note that amongst DNS queries, I'll strive to only redirect those which target these domains.
    This way, you'll still be able to use your local DNS for your usual (internal) queries...
"""

            message += f"""
The remote DNS servers are:
{remote_dns_servers_string}
"""
        elif no_dns_message is not None:
            message += no_dns_message
        print(message)

        try:
            connected = False

            child = pexpect.spawn(command, encoding='utf-8')
            if '-vv' in self.__sshuttle_params:
                child.logfile = sys.stdout

            while not connected:
                ret = child.expect([".*sudo.*assword:", ".*continue connecting.*yes/no", ".*assword:", ".*onnected."])
                if ret == 0:
                    self.__sudo_passwd = getpass.getpass('[local sudo] Password: ')
                    child.sendline(self.__sudo_passwd)
                elif ret == 1:
                    #print(1)
                    #prompt = child.readline()
                    #prompt = 'yes/no'
                    #confirm = input(prompt)
                    #print('@'+confirm+'@')
                    confirm = 'yes'
                    child.sendline(confirm)
                elif ret == 2:
                    if self.__passwd is None:
                        self.__passwd = getpass.getpass(f'Password for connection {user}@{host}: ')
                    child.sendline(self.__passwd)
                elif ret == 3:
                    print('Connection established successfully!')
                    connected = True

            if connected:
                while True:
                    if child.isalive():
                        self._ipt_dns()
                        time.sleep(0.01)
                    else:
                        if wait_forever:
                            print("""Apparently, the peer has no activity since a while, but as
I said, it may only 'appear' this way. As the script
is configured to wait forever, I won't do anything...""")
                        else:
                            print("""It appears that the peer didn't respond since a while.
Closing connection...""")
                            break
        except Exception as e:
            print('Unexpected error!')
            print(e)

def signal_handler(sig, frame):
    name = sig
    if sig == 2:
        name = 'SIGINT'
    elif sig == 15:
        name = 'SIGTERM'
    print('Terminated by signal %s' %(name))
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    global host
    global user
    global passwd

    if len(sys.argv[1:]) >= 1 or (user is not None and host is not None):
        if user is None and host is None:
            args = sys.argv[1].split('@')
            if len(args) == 2:
                user, host = args
    else:
        print(f'Usage: {sys.argv[0]} [user]@[host]\n')
        sys.exit(1)

    sshuttleplus = SshuttlePlus(host, user, passwd, sshuttle_params)
    sshuttleplus.sshuttle()

if __name__ == '__main__':
    main()
